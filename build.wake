tuple LdScriptGeneratorOptions =
  global TopDTSFile:    Path
  global OtherDTSFiles: List Path
  global OutputFile:    String
  global Layout:        LdScriptLayout

global data LdScriptLayout =
  # The default mode tries to strike a good balance for all use-cases.
  # If you don't need scratchpad or ramrodata modes, use the default one.
  LDSCRIPT_DEFAULT
  # Scratchpad mode places the entire binary contents into the memory
  # selected by metal,ram in the chosen node.
  LDSCRIPT_SCRATCHPAD
  # Ramrodata mode places all read-only data into writable memory under
  # the assumption that this decreases read latency for benchmarks.
  # Also, if the memory selected by metal,itim is large enough, this places
  # all non-init text into the ITIM.
  LDSCRIPT_RAMRODATA
  # This layout is used for freertos use when pmp is need, it introduce symbole
  # and sections for memory isolation (based on defauult lds)
  LDSCRIPT_FREERTOS

# Instead of copying the script sources into build/{here}, we'll just
# execute directly out of the package directory, since nothing gets
# modified during execution.
#
# The virtualenv does get placed in build/{here} by
# addPythonRequirementsEnv, along with a copy of requirements.txt
def generatorDir = here

#######################################################################
# makeLdScriptGeneratorOptions takes the following parameters:
#   - topDTSFile: The top-level Devicetree source file
#   - otherDTSFiles: any other Devicetree source files included in the
#                    hierarchy of Devicetree source files
#   - layout: one of {LDSCRIPT_DEFAULT, LDSCRIPT_SCRATCHPAD,
#                     LDSCRIPT_RAMRODATA}
#   - outputFile: A string representing the path of the output file to
#                 produce
#######################################################################
global def makeLdScriptGeneratorOptions topDTSFile otherDTSFiles layout outputFile =
  LdScriptGeneratorOptions topDTSFile otherDTSFiles outputFile layout

global def runLdScriptGenerator options =
  def topDTSFile = options.getLdScriptGeneratorOptionsTopDTSFile
  def otherDTSFiles = options.getLdScriptGeneratorOptionsOtherDTSFiles

  def inputs =
    # During execution, the generator needs access to both
    # Python sources and the linker script template files
    def outputDir = mkdir (simplify "{output}/..")
    def generatorSources = sources here `.*\.(py|lds)`
    def dtsSources = topDTSFile, otherDTSFiles
    outputDir, generatorSources ++ dtsSources

  def output = options.getLdScriptGeneratorOptionsOutputFile

  def args =
    def base =
      "-d", topDTSFile.getPathName,
      "-o", options.getLdScriptGeneratorOptionsOutputFile,
      Nil

    match options.getLdScriptGeneratorOptionsLayout
      LDSCRIPT_DEFAULT    = base
      LDSCRIPT_SCRATCHPAD = "--scratchpad", base
      LDSCRIPT_RAMRODATA  = "--ramrodata", base
      LDSCRIPT_FREERTOS  = "--freertos", base

  makePlan (pythonCommand "{generatorDir}/generate_ldscript.py" args) inputs
  | addPlanRelativePath "PYTHONPATH" generatorDir
  | addPythonRequirementsEnv generatorDir
  | setPlanFnOutputs (\_ output, Nil)
  | runJob

# This allows the python virtualenv to be created prior to running a build
# with `wake preinstall Unit`.
publish preinstall = (pythonRequirementsInstaller generatorDir), Nil

#########################################################################
# installLdScriptGenerator allows wake flows to install the linker script
# generator in customer deliveries and exclude all content which does
# not directly contribute to the generation of customer BSP content.
# It takes the following parameter
#   - installPath: the path to install the generator in
# For example, if you call `installLdScriptGenerator "scripts"`
# the generator script will be found in
#   scripts/ldscript-generator/generate_ldscript.py
#########################################################################
global target installLdScriptGenerator installPath =
  def generatorSources =
    source "{here}/README.md",
    source "{here}/LICENSE",
    sources here `.*\.py` ++
    sources "{here}/templates" `.*\.lds`
  def installWithStructure dir file =
    def oneDown = simplify "{here}/.."
    def into = "{dir}/{relative oneDown file.getPathName}"
    installAs into file
  mkdir installPath,
  map (installWithStructure installPath) generatorSources
